server {
#   Significa que estaremos escutando com a porta 443 (para https) e com o protocolo TLS ativo
    listen  443 ssl;
    # listen [::]:443 ssl;
#   Nome do domínio (são usados duas variações que as pessoas normalmente colocam)
    server_name wportilh.42.fr;
#   Define o caminho do certificado
    ssl_certificate /etc/nginx/ssl/wportilh.crt;
#   Define o caminho da key
    ssl_certificate_key /etc/nginx/ssl/wportilh.key;
#   Define o protocolo de segurança ssl/tls
    ssl_protocols TLSv1.2 TLSv1.3;
#   Define globalmente a pasta raiz que o nginx procurará os arquivos do site
    root /var/www;
#   Define a prioridade de arquivo index a ser exibido. Se .php não é encontrado, .html será buscado.
#   Se nenhum dos dois for encontrado, nginx deverá lançar o erro 403 (forbidden)
    index   index.php;
#   Define o tempo que uma conexão estará aberta, permitindo que outras solicitações sejam
#   feitas na conexão existente
    # keepalive_timeout    70;

#   Define a pasta raíz do servidor
    location / {
    #   Define quais arquivos dinâmicos o nginx tentará acessar. Se uri (solicitação original) não existir,
    #   nginx tentará o .php + os parâmetros (depois de ?). Se .php falhar, nginx tentará .html, e, se html
    #   não existir, enviará 404 (not found)
        try_files   $uri /index.php?$args;
    #   Chamamos a diretiva para incluir o cabeçalho last-modified contendo a data e hora que houve a última
    #   alteração no que foi solicitado. Serve para controle de cache e para rastreamento e auditoria.
    #   Nesse contexto, pode não ser necessário. Tenho que verificar melhor.
        # add_header  Last-Modified $date_gmt;
    #   Adiciona o cabeçalho Cache-Control com as opções de não armazenamento e no-cache indica que pode ser
    #   armazenado em cache, mas sempre deve ser revalidado com o servidor
        # add_header  Cache-Control 'no-store, no-cache';
    #   Ao desativar, impede que a data de alteração seja enviada ao cliente. Dessa forma, a solicitação sempre
    #   será enviada completamente, mesmo que não houverem novas alterações.
        # if_modified_since off;
    #   Impede que o servidor envie a informação ao navegador de por quanto tempo ele deve manter o cache
    #   dos recursos. Isso faz com que ocorram mais solicitações de atualização.
        # expires off;
    #   impede que o etag seja enviado para o navegador, fazendo com que ele não saiba se a página foi ou
    #   não atualizada. etag guarda meio que uma tag única de cada página web, por meio dela, o navegador
    #   sabe se a página foi ou não atualizada, comparando tag com tag.
        # etag off;
    }

#   Define que qualquer endereço terminado com '.php', entrará nessa configuração.
#   ~ aceita maiúsculas e minúsculas; \ escapa o ponto; $ define que a string deve terminar com '.php'.
    location ~ \.php$ {
    #   separa a url em partes para ser tratada pelo fastcgi (tudo antes de .php e tudo depois de .php, que)
    #   são infos adicionais. Essas infos podem ser, por exemplo, a resolução de uma imagem.
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
    #   Define a porta que o nginx enviará as solicitações PHP ao php-fastCGI dentro do wordpress, que lidará
    #   e executará o código PHP e retornará para o nginx, que enviará ao navegador a resposta
    #   da solicitação (página carregada, por exemplo). Em resumo, faz a conexão entre nginx e php
        fastcgi_pass wordpress:9000;
    #   É o arquivo padrão que será buscado ao buscar um diretório. Geralmente é o arquivo padrão utilizado
    #   como ponto de partida para carregar uma página php
        fastcgi_index index.php;
    #   Inclui um arquivo de configuração que já contém variáveis e diretivas relacionadas a configuração
    #   do fastcgi. É importante utilizá-la porque contém configurações e parâmetros pré-definidos
    #   importantes para o correto funcionamento do fastcgi
        include fastcgi_params;
    #   Define o caminho da variável SCRIPT_FILENAME, que será passada para o servidor fpm. É uma config essencial
    #   $document_root = diretório raíz do servidor (ex: /var/www/html)
    #   $fastcgi_script_name = caminho do arquivo FastCGI que está sendo executado (ex: diretório/arquivo.php)
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #   Define a variável PATH_INFO com o valor contido dentro de fastcgi_path_info
    #   ex: exemplo.com/diretorio/arquivo.php/info (/info é essa informação adicional)
        fastcgi_param PATH_INFO fastcgi_path_info;
    }
}
